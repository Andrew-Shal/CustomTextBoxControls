/*
 * 
 * Custom Control to add textbox with placeholder text
 * Raw code here for reference
 * in current project, we're using the binary of this
 * to make changes to this control, you would have to add this code
 * to a separate custom control project, remove the autogenerated control'
 * that c#  loads. Simply add a new item "class" and paste this code in that class file.
 * Once this is done, clean the project and build. you should now be able to get
 * the binary of the updated customcontrol
 * 
 */
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace CustomControls
{
    public class PlaceholderTextBox : TextBox
    {
        private Panel container;
        protected string text = "Search";
        protected Color textColorDefault = Color.Gray;
        public Color textColor = Color.Gray;
        protected Color textColorRequired = Color.Red;
        private Font font;
        private SolidBrush textColorEstablished;
        private bool required = false;
        private bool focusWithColor = false;
        private int vuelta = 0;

        public PlaceholderTextBox()
        {
            Initialize();
        }

        private void Initialize()
        {
            font = Font;
            CharacterCasing = CharacterCasing.Normal;
            container = null;

            CreatePlaceHolder();

            Leave += new EventHandler(LoseFocus);
            TextChanged += new EventHandler(ChangeText);
        }

        private void CreatePlaceHolder()
        {
            if (container == null && TextLength <= 0)
            {
                container = new Panel();
                container.Paint += new PaintEventHandler(paintContainer);
                Invalidate();
                container.Click += new EventHandler(clickContainer);
                Controls.Add(container);

            }
        }
        private void RemovePlaceHolder()
        {
            if (container != null)
            {
                Controls.Remove(container);
                container = null;
            }
        }
        private void clickContainer(object sender, EventArgs e)
        {
            Focus();
        }
        private void paintContainer(object sender, PaintEventArgs e)
        {
            container.Location = new Point(2, 0);
            container.Height = Height;
            container.Width = Width;
            container.Anchor = AnchorStyles.Left | AnchorStyles.Right;
            textColorEstablished = new SolidBrush(textColor);
            Graphics g = e.Graphics;
            g.DrawString(text, font, textColorEstablished, new PointF(-1f, 1f));
        }
        private void LoseFocus(object sender, EventArgs e)
        {
            if (TextLength > 0)
            {
                RemovePlaceHolder();
            }
            else
            {
                if (required == true)
                {
                    textColor = textColorRequired;
                }
                else
                {
                    textColor = textColorRequired;
                }
                Invalidate();
            }
        }
        private void ChangeText(object sender, EventArgs e)
        {
            if (TextLength > 0)
            {
                RemovePlaceHolder();
            }
            else
            {
                CreatePlaceHolder();

                vuelta += 1;
                if (vuelta >= 1 && required == true)
                {
                    textColor = textColorRequired;
                }
            }
        }
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            CreatePlaceHolder();
        }
        protected override void OnInvalidated(InvalidateEventArgs e)
        {
            base.OnInvalidated(e);

            if (container != null)
            {
                container.Invalidate();
            }
        }

        [Category("PlaceHolder Attributes")]
        [Description("set the placeholder text")]
        public string PlaceHolderText
        {
            get { return text; }
            set
            {
                text = value;
                Invalidate();
            }
        }

        [Category("PlaceHolder Attributes")]
        [Description("set the placeholder font")]
        public Font PlaceHolderFont
        {
            get { return font; }
            set
            {
                font = value;
                Invalidate();
            }
        }
        [Category("PlaceHolder Attributes")]
        [Description("set the placeholder field required")]
        public bool PlaceHolderFieldRequired
        {
            get { return required; }
            set
            {
                required = value;
                Invalidate();
            }
        }
    }
}
